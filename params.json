{"name":"Curs","tagline":"","body":"# JavaScript\r\n## Part I: data types and basics\r\n\r\n---\r\n\r\n# Data types\r\n\r\n**Primitives**\r\n- Boolean\r\n- Number\r\n- String\r\n- Null\r\n- Undefined\r\n- (Symbol ES6)\r\n\r\n**Object**\r\n\r\n---\r\n\r\n## Boolean\r\n\r\nRepresents a logical entity and can be either **true** or **false**;\r\n\r\n## Number\r\n\r\nRepresents numbers. There is only one type in JavaScript (64-bit double).\r\n\r\nCan have values between -(2<sup>53</sup> - 1) and 2<sup>53</sup> - 1 .\r\n\r\nAlong with numbers, there are three special values **+Infinity**, **-Infinity** and **NaN** (not a number);\r\n\r\n## String\r\n\r\nRepresent text data.\r\n\r\n## Null\r\n\r\nA special data type used to represent \"empty\" values, that is when a variable doesn't have any value, but has been initialized. Null has only one value: **null**.\r\n\r\n## Undefined\r\n\r\nAll variables are initialized with **undefined**.\r\n\r\n---\r\n\r\n# Objects\r\n\r\nAn object is a collection of name (key) / value pairs. Keys can only be strings, values can be anything, including functions or other objects.\r\n\r\n```javascript\r\nvar a = {\r\n\tprop1: 3,\r\n\tprop2: 'proprietate'\r\n};\r\n\r\nconsole.log( a.prop1 );\t\t// 3\r\n\r\nconsole.log( a['prop2'] );\t// proprietate\r\n```\r\n\r\nThere are several ways of initializing an object. We'll get into more detail in the next lesson.\r\n\r\n---\r\n\r\n## Objects\r\n\r\n\"Everything\" in JavaScript is an Object.\r\n\r\n- A function is an object with the only distinction that it can be \"called\".\r\n\r\n- Numbers, booleans and strings are also sometimes objects.\r\n\r\n- Arrays are objects as well.\r\n\r\n---\r\n\r\n## Arrays\r\n\r\nArrays are an indexed collection of values. The behave just like regular objects, i.e. can have their own methods and properties. However, the values are accessed via an index number, not a key. The index starts at 0. They are not a primitive data type.\r\n\r\n```javascript\r\nvar arr = [5, 'valoare', true];\r\n\r\narr[1] === 'valoare'; // true\r\narr.length;\t\t\t// 3\r\n\r\n\r\narr.push(3);\r\narr[3] === 3;\t\t\t// true\r\narr.length\t\t\t// 4\r\n```\r\n\r\n---\r\n\r\n#### the typeof operator\r\n\r\nOne simple way of checking the type of a variable is to use the **typeof** operator\r\n\r\n```javascript\r\ntypeof 2\t\t\t\"number\"\r\ntypeof '2'\t\t\t\"string\"\r\ntypeof true\t\t\t\"boolean\"\r\ntypeof {} \t\t\t\"object\"\r\ntypeof null\t\t\t\"object\"\r\ntypeof []\t\t\t\"object\"\r\ntypeof NaN\t\t\t\"number\"\r\ntypeof undefined\t\"undefined\"\r\ntypeof a \t\t\t\"undefined\"\r\n```\r\n\r\n---\r\n\r\n## Expressions\r\n\r\nAn expression is any valid unit of code that resolves to a value. They come in two main types, expressions that assign a value and those that have value.\r\n\r\n```javascript\r\nx = 3\r\n\r\n3 + 4\r\n```\r\n\r\nExpression categories:\r\n- arithmetic: evaluate to a number\r\n- string: evaluate to a string\r\n- logical: evaluate to **true** or **false**\r\n- object: evaluate to an object\r\n\r\n---\r\n\r\n## Operators\r\n\r\nOperators generally work from right to left, i.e the right-most component is evaluated first.\r\n\r\n#### Assignment\r\n\r\nFor assignment, this means that the left-side variable takes the value on the right side of the operator\r\n\r\n```javascript\r\nx = y\r\n```\r\n\r\nx takes the value of y\r\n\r\n```javascript\r\nx += y\t\r\nx /= y\r\n```\r\n\r\nis the same as\r\n\r\n```javascript\r\nx = x + y\t\r\nx = x / y\r\n```\r\n\r\n#### Arithmetic\r\n\r\n```javascript\r\n\t+\t-\t*\t/\r\n```\r\n\r\n- addition\t\r\n- subtraction\t\r\n- multiplication\t\r\n- division\t\r\n\r\n```javascript\r\n\t%\t++\t--\r\n```\r\n\r\n- modulo\r\n- increment\r\n- decrement\r\n\r\n```javascript\r\nx \t= \t0;\r\n++x\t===\t1;\r\nx++\t===\t1;\r\nx \t===\t2;\r\n--x\t===\t1;\r\n```\r\n\r\n#### Comparison\r\n\r\n```javascript\r\n\t==\t===\t!=\t!==\t<\t>\t<=\t>=\r\n```\r\n\r\n**==** vs **===** (equal vs strict equal)\r\n\r\nEqual == evaluates to true if the two values are identical\r\n\r\n```javascript\r\nvar = 3;\r\n\r\na == 3\t\t// true\r\na == '3'\t// true\r\n3 == '3'\t// true\r\n```\r\n\r\nStrict equal === evaluates to true if the two values are identical and have the same type.\r\n\r\n```javascript\r\nvar = 3;\r\n\r\na === 3\t\t// true\r\na === '3'\t// false\r\n3 === '3'\t// false\r\n```\r\n\r\nMore on equality comparison and sameness [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness).\r\n\r\n#### Logical\r\n\r\n```javascript\r\n\t&& || !\r\n```\r\n\r\nLogical AND\r\n\r\n```javascript\r\nvar a1 = true && true;      // t && t returns true\r\nvar a2 = true && false;     // t && f returns false\r\nvar a3 = false && true;     // f && t returns false\r\nvar a4 = false && (3 == 4); // f && f returns false\r\nvar a5 = \"Cat\" && \"Dog\";    // t && t returns Dog\r\nvar a6 = false && \"Cat\";    // f && t returns false\r\nvar a7 = \"Cat\" && false;    // t && f returns false\r\n```\r\n\r\nLogical OR\r\n\r\n```javascript\r\nvar o1 =  true || true;     // t || t returns true\r\nvar o2 = false || true;     // f || t returns true\r\nvar o3 =  true || false;    // t || f returns true\r\nvar o4 = false || (3 == 4); // f || f returns false\r\nvar o5 = \"Cat\" || \"Dog\";    // t || t returns Cat\r\nvar o6 = false || \"Cat\";    // f || t returns Cat\r\nvar o7 = \"Cat\" || false;    // t || f returns Cat\r\n```\r\n\r\nLogical NOT\r\n\r\n```javascript\r\nvar n1 = !true;  // !t returns false\r\nvar n2 = !false; // !f returns true\r\nvar n3 = !\"Cat\"; // !t returns false\r\n```\r\n\r\n#### Bitwise\r\n\r\n```javascript\r\n\t&\t|\t^\t>>\t>>>\t<<\r\n```\r\n\r\nBitwise AND, OR, XOR, NOT, left shift, sign-propagating right shift, zero-fill right shift\r\n\r\n#### String\r\n\r\n```javascript\r\n\t+\r\n\r\nvar bb = 'bibi';\r\n'gigi' + 'mimi' + bb === 'gigimimibibi'\r\n```\r\n\r\n#### Ternary\r\n\r\n```javascript\r\n\t? :\r\n\r\n a === 3 ? console.log('equals 3') : console.log('doesn\\'t equal 3');\r\n\r\n if (a === 3) {\r\n\tconsole.log('equals 3'); \r\n } else {\r\n \tconsole.log('doesn\\'t equal 3')\r\n }\r\n```\r\n\r\nMore on expressions and operators [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators).\r\n\r\n---\r\n\r\n## Type conversion\r\n\r\nBecause JavaScript is **loosely-typed**, the JavaScript interpreter converts variable types on the fly, according to very specific rules;\r\n\r\n```javascript\r\nvar a;\r\n\ttypeof a \t\"undefined\"\r\n\r\na = 3;\r\n\ttypeof a\t\"number\"\r\n\r\na = a + '3';\r\n\ttypeof a \t\"string\"\r\n\r\na = false || a;\r\n\ta becomes '33'\r\n\ttypeof a \t\"string\"\r\n\r\na = true || a;\r\n\ta becomes true\r\n\ttypeof a \t\"boolean\"\r\n\r\na = + a;\r\n\ta becomes 1\r\n\ttypeof a \t\"number\"\r\n\r\na = a + null\r\n\tnull is converted to 0 so a remains 1\r\n\r\na = + undefined\r\n\tundefined becomes NaN, so a becomes undefined\r\n\ttypeof a \t\"undefined\"\r\n\r\na === NaN // false\r\n\tNaN is not equal to itself, because JavaScript\r\n\ttypeof a \t\"number\"\r\n\r\na += 'a';\r\n\ta becomes 'NaNa'\r\n\ttypeof a \t\"string\"\r\n\r\na += undefined;\r\n\ta becomes 'NaNaundefined'\r\n\ttypeof a \t\"string\"\r\n```\r\n\r\nMore on type conversion and equality operators [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Using_the_Equality_Operators).\r\n\r\n---\r\n\r\n## Statements\r\n\r\n- if\r\n- switch\r\n- while\r\n- do\r\n- for\r\n- break\r\n- continue\r\n- return\r\n- throw\r\n- try/catch\r\n- var\r\n\r\n---\r\n\r\n## Control flow\r\n\r\n#### Block {}\r\n\r\nDelimited by curly brackets **{}**. A block statement groups other statements.\r\n\r\n#### break\r\n\r\nTerminates the current loop or switch\r\n\r\n#### continue\r\n\r\nTerminates the current iteration of the loop and continues with the next one\r\n\r\n#### if...else\r\n\r\nExecutes a statement if the condition is true, otherwise another optional statement will be executed.\r\n\r\n#### switch\r\n\r\nEvaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case.\r\n\r\n#### throw\r\n\r\nThrows a user-defined exception.\r\n\r\n#### try...catch\r\n\r\nTries a block of statements and specifies a response if an exception is thrown.\r\n\r\n---\r\n\r\n## Declarations\r\n\r\n#### var\r\n\r\nDeclares a variable and optionally initializes it with a value;\r\n\r\n```javascript\r\nvar a;\r\nvar b = 3;\r\n\r\na === undefined;\t// is true\r\na === 3;\t\t\t// is true\r\n```\r\n\r\n#### let\r\n\r\nDeclares a block-scoped local variable.\r\n\r\n#### const\r\n\r\nDeclares a read-only (immutable) constant.\r\n\r\n---\r\n\r\n## Functions\r\n\r\n#### function\r\n\r\nDeclares a function with the specified parameters.\r\n\r\n#### return\r\n\r\nSpecifies the return value of a function.\r\n\r\n```javascript\r\nfunction ofunctie(ceva) {\r\n\tvar altceva = 'altceva';\r\n\treturn ceva + altceva\r\n}\r\n```\r\n\r\n---\r\n\r\n## Iterations\r\n\r\n#### do...while\r\n\r\nCreates a loop that runs until the condition is false. The condition is evaluated after the statements so the code is run at least once.\r\n\r\n#### while\r\n\r\nCreates a loop that runs until the condition is false. The condition is evaluated before the statements.\r\n\r\n```javascript\r\nvar i = 0;\r\ndo {\r\n\tconsole.log('ceva');\t// this code will run\r\n} while(i < 0);\r\n\r\nwhile (i < 0) {\r\n\tconsole.log('altceva');\t// this one won't\r\n}\r\n```\r\n\r\n#### for\r\n\r\nCreates a loop with three optional expressions and a statement which is run in a loop until the middle expression is false.\r\n\r\n```javascript\r\nfor (var i = 0; i < 5; i++) {\r\n\tconsole.log(i);\r\n}\r\n```\r\n\r\nFirst the variable i is created and given the value 0. In the first run of the loop, i === 0. After the statement block is run, i is incremented and gets the value 1.\r\n\r\n#### for...in\r\n\r\nIterates over the enumerable properties of an object\r\n\r\n#### for...of\r\n\r\nIterates over iterable objects. Only works in ES6 (ECMAScript 6) the next 'version' of the JavaScript standard.\r\n\r\n---\r\n\r\n---\r\n\r\n# JavaScript\r\n## Part II: grammar\r\n\r\n---\r\n\r\n## Example\r\n\r\n```javascript\r\n/*\r\n\tfirst we declare the variables\r\n*/\r\nvar a;\r\nvar b = 5;\r\nvar c;\r\n\r\na = 3;\r\nc = a + b;\r\n\r\n\r\n\r\nvar smaller = function() {\r\n\t// \r\n\tconsole.log('number is smaller than 10');\r\n};\r\n\r\nfunction bigger() {\r\n\tconsole.log('number is bigger than 10');\r\n}\r\n\r\n// if c is bigger than 10, call bigger, otherwise call smaller\r\nif (c > 10) {\r\n\tbigger();\t\r\n} else {\r\n\tsmaller();\r\n}\r\n\r\n```\r\n\r\n#### Best practices\r\n\r\n- always use semicolon **;**\r\n- always use curly brackets **{}**\r\n- each statement gets its own line\r\n- space between operators and blocks\r\n\r\n---\r\n\r\n## Syntax\r\n\r\nJavaScript borrows a lot from Java in terms of syntax, but is otherwise completely unrelated.\r\n\r\n## Identifiers (names)\r\n\r\n- starts with a letter or \"_\" or \"$\"\r\n- followed by zero or more letters, digits, \"_\" or \"$\"\r\n- by convention, all variables, members and function names:\r\n\t- start with lowercase (except for constructors)\r\n\t- that start with \"_\" should be reserved for internal use (are private)\r\n\t- that start with \"$\" should be reserved for machines\r\n- cannot coincide with a reserved word\r\n\r\n---\r\n\r\n#### Reserved words\r\n\r\nYou don't have to remember them, but it's good to know that they exist.\r\n\r\n- abstract\r\n- boolean break byte\r\n- case catch char class const continue\r\n- debugger default delete do double\r\n- else enum export extends\r\n- false final finally float for function\r\n- goto\r\n- if implements import in instanceof int interface\r\n- long\r\n- native new null\r\n- package private protected public\r\n- return\r\n- short static super switch synchronized\r\n- this throw throws transient true try typeof\r\n- var volatile void\r\n- while with\r\n\r\n---\r\n\r\n#### Comments\r\n\r\nComments allow you to make annotations without affecting the code \r\n\r\nOne line comments start with //\r\n\r\nMulti-line comments are enclosed with /\\* \\*/\r\n\r\n#### Declarations and statements\r\n\r\nA statement should end with a semicolon. This is optional, but is always recommended.\r\n\r\n```javascript\r\nvar a;\r\nvar b = 3;\r\n```\r\n\r\nThis is also valid but is not recommended\r\n\r\n```javascript\r\nvar c = 5\r\nd = 8;\r\ne = c + d\r\n```\r\n\r\n#### ASI - automatic semicolon insertion\r\n\r\nJavaScript uses ASI for 'convenience'. Technically, each statement must end with a semicolon, but the JavaScript interpreters will add the semicolon where they see fit. This is prone to errors and confusion and should be avoided.\r\n\r\n#### Code blocks\r\n\r\nA block of statements can be enclosed in curly brackets. This is optional in some cases, but is always recommended.\r\n\r\n\r\n```javascript\r\nif (something) {\r\n\t// do something\r\n} else {\r\n\t// do something else\r\n}\r\n```\r\n\r\nCurly brackets can be used to create blocks of code anywhere or just to differentiate some code.\r\n\r\n```javascript\r\nvar a = 5;\r\nvar c;\r\n{\r\n\tvar b = 15;\r\n\tc = a + b;\r\n}\r\n\r\nc === 20; // is true\r\n\r\n```\r\n\r\nIt's not always necessary to use them. This is also valid code but not recommended.\r\n\r\n```javascript\r\nif (something)\r\n\t// do something\r\nelse\r\n\t// do something else\r\n```\r\n\r\nStill valid, even less recommended.\r\n\r\n```javascript\r\nif (something) /* do something */ else /* do something else */\r\n```\r\n\r\nThe problem here is something like this:\r\n\r\n```javascript\r\nvar a, b, something = false;\r\n\r\nif (something) \r\n\ta = 3;\r\n\tb = 5;\r\n\r\na === 3; // false, a === undefined\r\nb === 5; // true\r\n\r\n```\r\n\r\nIs actually interpreted as:\r\n\r\n```javascript\r\nvar a, b, something = false;\r\n\r\nif (something) {\r\n\ta = 3;\r\n}\r\nb = 5;\r\n\r\na === 3; // false, a === undefined\r\nb === 5; // true\r\n```\r\n\r\n---\r\n\r\n## Literals\r\n\r\n#### Array literals\r\n\r\n```javascript\r\nvar coffees = [\"French Roast\", \"Colombian\", \"Kona\"];\r\nvar fish = [\"Lion\", , \"Angel\"];\r\nvar myList = ['home', , 'school', ];\r\nvar myList = [ , 'home', , 'school'];\r\n```\r\n\r\n#### Boolean literals\r\n\r\n```javascript\r\nvar mimi = true;\r\nvar bibi = false;\r\n```\r\n\r\n#### Number literals\r\n\r\n```javascript\r\n// integers\r\n0\r\n1.3\r\n-23.666\r\n-.2e4\r\n```\r\n\r\n#### String literals\r\n\r\nAre defined with either a single or double quotation mark\r\n\r\n```javascript\r\n\"foo\"\r\n'bar'\r\n'1234'\r\n\"a new \\n line\"\r\n\"Can't use the same type of quotation marks inside a string\"\r\n'Don\\'t forget to use an escape character'\r\n'\"this\" is also valid'\r\n```\r\n\r\n---\r\n\r\n# JavaScript\r\n## Part III: hoisting, scope, closure\r\n\r\n---\r\n\r\n\r\n\r\n---\r\n\r\n# Variables\r\n\r\n# global local\r\n\r\n\r\n---\r\n\r\nnull is object \r\nnull == undefined\r\nnull !== undefined\r\n\r\ntruthy\r\n\r\ntype\r\n\r\n---\r\n\r\nMDN\r\nO'reilly\r\ncrockford\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}